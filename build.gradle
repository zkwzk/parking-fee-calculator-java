buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:10.0.3'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id "com.github.spotbugs" version "6.0.20"
}

apply plugin: 'org.owasp.dependencycheck'
dependencyCheck {
    nvd {
        apiKey = 'fd2cfa24-c2ed-4dd9-b882-9f96314a03ef'
    }
}


group = 'com.example'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 22
targetCompatibility = 22

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    spotbugs 'com.github.spotbugs:spotbugs:4.8.6'
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.13.0'
}


tasks.named('test') {
    useJUnitPlatform()
    jvmArgs("-XX:+EnableDynamicAgentLoading")
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

sourceSets {
    apiTest {
        java {
            srcDir 'src/apitest/java'
        }
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

configurations {
    apiTestImplementation.extendsFrom testImplementation
    apiTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task apiTest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.apiTest.output.classesDirs
    classpath = sourceSets.apiTest.runtimeClasspath
    shouldRunAfter test
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}